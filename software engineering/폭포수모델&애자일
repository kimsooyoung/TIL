
1960년대까지의 무원칙 막 코딩 “선코딩 후 서정 문제 해결”

로이스가 모델제시 1970

Managing the Development of Large Software Systems

폭포수모델 -> 하나가 끝나야 다음을 할 수 있음.(100가지면 100가지 다 정해야함)
전단계로 돌아갈 수 없음.
각 단계를 끝날 때 마다 결과물이 생김.
(Report, program)
그대로 구현해야함
단계가 명확하고 이해해하기 쉬움
집짓기와 비슷하여 직관적임.
관리자와 개발자 모두에게 쉬운방법
대규모 프로젝트 관리하기 쉬움
진행단계 파악이 쉬움
전체 일정이라는게 산출됨(초기에 모든 요구사항 확정=WBS)

완성된 집은 쉽게 바꾸지 못한다 -> 완성된 소프트웨어는 쉰게 변한다.

폭포수 모델의 피드백 부재와 변화가 어려운 문제 해결
실은 이런 문제로 현업에서는 폭포수 모델을 수정해서 사용해 왔음

처음에 모든 요구 사항을 확정 짓는 건 애초에 불가능하다.
이미 나름대로 폭포수 모델을 변형해서 사용하고 있다.
관리만을 위한 방법론은 아무것도 바꿀 수 없다(폭포수 모델은 관리가 편함)

그래서 나온게 애자일 모델.
2001 애자일 선언문
미국 유타 주의 스노우버드 스키 리조트에서 열린 한 모임
켄트 벡, 마틴 파울러, 로버트 마틴 등 17인의 구루 개발자들

공정과 도구보다 개인과 상호작용을, 포괄적인 문서보다 작동하는 소프트웨어를, 계약 협상보다 고객과 협력을, 계획을 따르기보다 변화에 대응하기를 더 가치있게 여긴다.

애자일의 본질 애자일은 방법론이 아니라 정신(핵심가치)
애자일(Agile)=기민한, 민첩한
비지니스 요구 변화를 민첩하게 수용하라
실패를 두려워하지 마라
실행하고 빨리실패하고 배우고 다시 시도하라.(Do, Fail fast, Learn and Redo)

따라서, “애자일 방법으로 개발한다”는 정확한 표현이 아님
애자일 정신에 부합한다면 다양한 실천 방법이 나올 수 있음
주요 방법론에는 익스트임 프로그래밍(XP),스트럼(Scrum)등이 있음

어떻게 작동하는가?(Scrum)
1.모든 할 일은 백로그로 관리(스프린트 진행시 구체화)
2.한 스프린트(2~4주)의 할 일만 정해 각 개발 단계를 짧고 빠르게 반복
3.한 스프린트가 끝나면 제품 출시(매우 짧은 릴리스)
4.고객에게 받은 피드백은 백로그에 추가하여 다음 스프린트에 반영
1~4 무한 반복하며 지속적으로 개선

Good point
변화에 빠르게 대응가능
- 계획과 기능에 대한 변경이 쉬움
- 문제점을 조기에 발견 할 수 있음
- 고객이 원하는 기능을 빠르게 출시(항상 출시 가능한 제품 상태)
현실적인 목표 수립가능
- 비현실정인 1년치 목표가 아닌 예측가능한 스프린트 단위(2~4주)의 목표만 세우면 됨
불필요한 관리 비용 감소
- 어차피 변할 프로젝트 전체 일정을 무의미하게 관리할 필요가 없음
- 할 일 목ㄹ록인 백로그와 예측 가능한 스프린트 일정만 관리하면 됨
높은 고객 만족도
- 고객은 원하는 기능을 자주 받아보고 피드백 줄 수 있어 최종 결과물 역시 만족

Before Agile
경영진의 지원 부족
- 폭포수 모델과 달리 프로젝트에 대한 통제력 상실 우려
애자일과 기업 문화가 충동
- 애자일 정신과 상충되는 기업문화로 많은 갈등 발생
적용시 초기 적응이 어려움
- 전통적 방법론 대비 생소함
- 변화를 이끌 경험자의 부족
- 변화하려는 구성원들의 의지 부족


After Agile
잦은 요구 사항변경
- 스펙을 확정할 수 없어 잦은 재설계 발생(자연스러운 현상..)
- 애자일의 필수 정차인 리펙토링(재설계)이 자주 생략됨
- 이로 인해 지속적으로 코드 품질이 하락함(나쁜 구조에 계속 기능 추가)
빠르기만 한 릴리스
- 짧은 개발로 완성도가 미흡하거나 충분히 테스트되지 않은 기능이 출시됨
- 잦은 저질 제품 출시로 기업 이미지 타격

이름만 애자일은 막코딩
- 개발 장계를 생략한 채 그냥 개발하고 고치는 관행으로 복귀
- 아무런 계획도 문서도 테스트도 없음

애자일을 성공하려면
애자일 팀 구성원의 역량 강화가 필수
각자가 장인정신을 갖고 자기 역량을 발전시켜야 점차 당성가능
애자일 달성을 위한 연습 지속

애자일 달성을 위한 연습
- Clean code
- 객체 지향 프로그래밍(OOP)
- 테스트 주도 개발(TDD)
- 리펙토링 (Refactoring)
- 짝 프로그래밍(Pair Programming)
- 코드리뷰 (Code Review)

민첩하게 개발해도 배포가 안되는 경우.
자동화 되지 않은 테스트는 많은 인력과 시간이 필요함
배포역시 인프라의 여러 환경적인 문제로 개발팀의 릴리스 속도를 따라가기 힘듬
결국 이미 완료된 스프린트 여러개가 쌓이면서 폭포수 모델처럼 됨
